version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
workflows:
  version: 2
  test_build_deploy:
    jobs:
      - pipenv_install_36:
          filters:
            tags:
              only: /.*/
      - pip_install_36:
          filters:
            tags:
              only: /.*/
      - pipenv_install_37:
          filters:
            tags:
              only: /.*/
      - validate_reqs_files:
          filters:
            tags:
              only: /.*/
      - pip_install_37:
          filters:
            tags:
              only: /.*/
      - contracts:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - pipenv_install_36
      - basics:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - pipenv_install_36
      - network:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - pipenv_install_36
      - character:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - pipenv_install_36
      - agents:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - pipenv_install_36
      - actors:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - pipenv_install_36
      - deployers:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - pipenv_install_36
      - cli:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - pipenv_install_36
      - tests_ok:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - basics
            - network
            - character
            - cli
            - deployers
#            - agents     # These jobs are left out to not block execution of workflow
#            - actors
#            - contracts
      - build_dev_docker_images:
          filters:
            tags:
              only: /.*/
          requires:
            - basics
      - finnegans_wake_demo:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - build_dev_docker_images
      - heartbeat_demo:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - build_dev_docker_images
#      - mypy:  # Disable mypy for the moment as it was wasting a CircleCI container for nothing
#          context: "NuCypher Tests"
#          filters:
#            tags:
#              only: /.*/
#          requires:
#            - tests_ok
      - estimate_gas:
          context: "NuCypher Tests"
          filters:
            tags:
              only: /.*/
          requires:
            - tests_ok
      - build_docs:
          filters:
            tags:
              only: /.*/
          requires:
            - tests_ok
      - test_build:
          filters:
            tags:
              only: /.*/
          requires:
            - build_docs
            - heartbeat_demo
            - finnegans_wake_demo
      - build_docker:
          filters:
            tags:
              only: /v[0-9]+.*/
            branches:
              ignore: /.*/
          requires:
            - test_build
      - test_deploy:
          context: "NuCypher PyPI"
          requires:
            - test_build
          filters:
            tags:
              only: /v[0-9]+.*/
            branches:
              ignore: /.*/
      - request_publication_approval:
          type: approval
          requires:
            - test_deploy
            - build_docker
          filters:
            tags:
              only: /v[0-9]+.*/
            branches:
              ignore: /.*/
      - publish_pypi:
          context: "NuCypher PyPI"
          requires:
            - request_publication_approval
          filters:
            tags:
              only: /v[0-9]+.*/
            branches:
              ignore: /.*/
      - publish_docker:
          context: "NuCypher Docker"
          requires:
            - request_publication_approval
          filters:
            tags:
              only: /v[0-9]+.*/
            branches:
              ignore: /.*/


python_36_base: &python_36_base
  parallelism: 1
  working_directory: ~/nucypher
  docker:
    - image: circleci/python:3.6

python_37_base: &python_37_base
  parallelism: 1
  working_directory: ~/nucypher
  docker:
    - image: circleci/python:3.7


commands:

  pipenv_install:
    description: "Install Python dependencies with Pipenv"
    parameters:
      python_version:
        type: string
        default: "3.7"
    steps:
      - checkout
      - run:
          name: Install Python Dependencies with Pipenv
          command: |
            sudo apt update -y && sudo apt install python3-dev -y
            pipenv sync --python << parameters.python_version >> --dev
      - run:
          name: Install Solidity Compiler (Pipenv Entrypoint)
          command: pipenv run install-solc
      - run:
          name: Check NuCypher Python API Entrypoint
          command: pipenv run python3 -c "import nucypher; print(nucypher.__version__)"
      - run:
          name: Check NuCypher CLI Entrypoint
          command: pipenv run nucypher --help

  check_nucypher_entrypoints:
    description: "Ensure both the python API and CLI entrypoints are usable"
    steps:
      - run:
          name: Check NuCypher Python API Entrypoint
          command: python3 -c "import nucypher; print(nucypher.__version__)"
      - run:
          name: Check NuCypher CLI Entrypoint
          command: |
            export PATH=~/.local/bin:$PATH
            source ~/.bashrc
            nucypher --help

  pip_install:
    description: "Install NuCypher with Pip"
    steps:
      - checkout
      - run:
          name: Install Python Dependencies with Pip
          command: pip3 install --user .
      - check_nucypher_entrypoints   # Ensure Standard Installation Entry-points Work
      - run:
          name: Install Python Development Dependencies with Pip
          command: pip3 install -r dev-requirements.txt --user .
      - run:
          name: Install Solidity Compiler
          command: ./scripts/installation/install_solc.sh
      - check_nucypher_entrypoints

  pip_install_no_dev:
    description: "Install NuCypher with Pip (no development dependencies)"
    steps:
    - checkout
    - run:
        name: Install Python Dependencies with Pip
        command: pip3 install --user .
    - check_nucypher_entrypoints   # Ensure Standard Installation Entry-points Work
    - run:
        name: Install Solidity Compiler
        command: ./scripts/installation/install_solc.sh
    - check_nucypher_entrypoints

  prepare_environment:
    description: "Checkout application code and Attach the Workspace"
    steps:
      - checkout
      - attach_workspace:
          at: ~/.local/share/virtualenvs/
      - run:
          name: "Create directory for test reports"
          command: mkdir reports

  prepare_dev_docker:
    description: "access pre-build docker image"
    steps:
      - setup_remote_docker
      - attach_workspace:
          at: ~/docker-dev
      - run:
          name: "load docker"
          command: docker load < ~/docker-dev/dev-docker-build.tar

  codecov:
    description: "Upload Coverage Report To codecov.io"
    steps:
      - codecov/upload:
          file: reports/coverage.xml

  capture_test_results:
    description: "Store and Upload test results; Follow-up step for tests"
    steps:
      - codecov
      - store_test_results:
          path: reports
      - run:
          name: Prepare test logs for storage as artifacts
          command: |
            mkdir -p ~/test-logs/
            mv ~/.cache/nucypher/log/nucypher.log ~/test-logs/nucypher-container-$CIRCLE_NODE_INDEX.log
      - store_artifacts:
          path: ~/test-logs/


  build_and_save_test_docker:
    description: "Build dev docker image for running tests against docker"
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: docker-compose -f ./scripts/circle/docker-compose.yml build nucypher-circle-dev
      - run:
          name: mkdir
          command: mkdir ~/docker-dev
      - run:
          name: save Docker Image
          command: docker save circle:nucypher -o ~/docker-dev/dev-docker-build.tar
      - persist_to_workspace:
          root: ~/docker-dev
          paths:
            - "*.tar"


jobs:

  # Python 3.6
  pip_install_36:
    <<: *python_36_base
    steps:
      - pip_install
  pipenv_install_36:
    <<: *python_36_base
    steps:
      - pipenv_install:
          python_version: "3.6"
      - persist_to_workspace:
          root: ~/.local/share/virtualenvs/
          paths:
            - nucypher-*

  # Python 3.7
  pip_install_37:
    <<: *python_37_base
    steps:
      - pip_install
  pipenv_install_37:
    <<: *python_37_base
    steps:
      - pipenv_install:
          python_version: "3.7"

  agents:
    <<: *python_36_base
    parallelism: 4
    steps:
      - prepare_environment
      - run:
          name: Blockchain Agent Tests
          command: |
            pipenv run pytest $(circleci tests glob "tests/blockchain/eth/entities/agents/**/test_*.py" | circleci tests split --split-by=timings)
      - capture_test_results

  actors:
    <<: *python_36_base
    parallelism: 2
    steps:
      - prepare_environment
      - run:
          name: Blockchain Actor Tests
          command: |
            pipenv run pytest $(circleci tests glob "tests/blockchain/eth/entities/actors/**/test_*.py" | circleci tests split --split-by=timings)
      - capture_test_results

  deployers:
    <<: *python_36_base
    parallelism: 2
    steps:
      - prepare_environment
      - run:
          name: Contract Deployer Tests
          command: |
            pipenv run pytest $(circleci tests glob "tests/blockchain/eth/entities/deployers/test_*.py" | circleci tests split --split-by=timings)
      - capture_test_results

  contracts:
    <<: *python_36_base
    parallelism: 5
    steps:
      - prepare_environment
      - run:
          name: Ethereum Contract Unit Tests
          command: |
            pipenv run pytest $(circleci tests glob "tests/blockchain/eth/contracts/**/test_*.py" | circleci tests split --split-by=timings)
      - capture_test_results

  basics:
    <<: *python_36_base
    parallelism: 1
    steps:
      - prepare_environment
      - run:
          name: Tests for Blockhain interfaces, Crypto functions, Node Configuration and Keystore
          command: |
            pipenv run pytest $(circleci tests glob "tests/config/**/test_*.py" "tests/crypto/**/test_*.py" "tests/keystore/**/test_*.py" "tests/blockchain/eth/interfaces/**/test_*.py" "tests/blockchain/eth/clients/**/test_*.py" | circleci tests split --split-by=timings)
      - capture_test_results

  network:
    <<: *python_36_base
    steps:
      - prepare_environment
      - run:
          name: Network Tests
          command: |
            pipenv run pytest $(circleci tests glob "tests/network/**/test_*.py" | circleci tests split --split-by=timings)
      - capture_test_results

  character:
    <<: *python_36_base
    parallelism: 4
    steps:
      - prepare_environment
      - run:
          name: Character Tests
          command: |
            pipenv run pytest $(circleci tests glob "tests/characters/**/test_*.py" "tests/learning/**/test_*.py" | circleci tests split --split-by=timings)
      - capture_test_results

  cli:
    <<: *python_36_base
    parallelism: 6
    steps:
      - prepare_environment
      - run:
          name: Nucypher CLI Tests
          command: |
            pipenv run pytest $(circleci tests glob "tests/cli/**/test_*.py" | circleci tests split --split-by=timings)
      - capture_test_results

  tests_ok:
    <<: *python_36_base
    steps:
      - run:
          name: Nucypher CLI Tests
          command: echo "Test modules succeeded"

  build_dev_docker_images:
    <<: *python_36_base
    steps:
      - build_and_save_test_docker

  heartbeat_demo:
    <<: *python_37_base
    steps:
      - checkout
      - prepare_dev_docker
      - run:
          name: Run demo Ursula fleet, Alicia and the Doctor
          command: ./scripts/circle/run_heartbeat_demo_docker-circle.sh
      - store_artifacts:
          path: /tmp/ursulas-logs

  finnegans_wake_demo:
    working_directory: ~/nucypher
    <<: *python_37_base
    steps:
      - checkout
      - prepare_dev_docker
      - run:
          name: Run demo Ursula fleet, Finnegans wake Demo code
          command: ./scripts/circle/run_finnegans_wake_demo_docker-circle.sh
      - store_artifacts:
          path: /tmp/ursulas-logs

  validate_reqs_files:
    working_directory: ~/nucypher
    <<: *python_36_base
    steps:
      - prepare_environment
      - run:
          name: Run Requirements comparison
          command: ./scripts/circle/compare_reqs.sh

  mypy:
    <<: *python_36_base
    steps:
      - prepare_environment
      - run:
          name: Install mypy
          command: |
              pipenv run pip install lxml
              pipenv run pip install mypy
      - run:
          name: Run Mypy Static Type Checks (Always Succeed)
          command: |
              mkdir ./mypy_reports ./mypy_results
              export MYPYPATH=./nucypher
              pipenv run mypy ./nucypher --config-file=mypy.ini --xslt-html-report ./mypy_reports/html/ --linecount-report ./mypy_reports/linecount || true
      - store_artifacts:
          path: ./mypy_reports

  estimate_gas:
    <<: *python_36_base
    steps:
      - checkout
      - attach_workspace:
          at: ~/.local/share/virtualenvs/
      - run:
          name: Estimate Gas
          command: |
            pipenv run python tests/metrics/estimate_gas.py
      - store_artifacts:
          path: tests/metrics/results/

  build_docs:
    <<: *python_36_base
    steps:
      - checkout
      - attach_workspace:
          at: ~/.local/share/virtualenvs/
      - run:
          name: Install Documentation Build Dependencies
          command: pip3 install --user sphinx recommonmark sphinx-rtd-theme aafigure
      - run:
          name: Build Sphinx Documentation
          command: |
            cd docs
            make html
      - store_artifacts:
          path: docs/build

  test_build:
    <<: *python_36_base
    steps:
      - checkout
      - pip_install
      - run:
          name: Install Twine
          command: pip install --user twine
      - run:
          name: Build Python Distribution Wheel
          command: |
            pipenv run python setup.py sdist
            pipenv run python setup.py bdist_wheel

  build_docker:
    working_directory: ~/nucypher
    docker:
      - image: docker:18.06.1-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - ~/docker/nucypher.tar
      - run:
          name: Load Docker Image Layer Cache
          command: |
            set +o pipefail
            docker load -i ~/docker/nucypher.tar | true
      - run:
          name: Build Docker Image
          command: |
            docker build -f deploy/docker/Dockerfile --cache-from=nucypher -t nucypher/nucypher:$CIRCLE_TAG .
      - run:
          name: Save Docker Image Layer Cache
          command: |
            mkdir -p ~/docker
            docker save -o ~/docker/nucypher.tar nucypher/nucypher:$CIRCLE_TAG
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - ~/docker/nucypher.tar

  test_deploy:
    <<: *python_36_base
    steps:
      - checkout
      - pip_install
      - run:
          name: Install Twine
          command: pip3 install --user twine
      - run:
          name: Verify git tag == __version__ (Test Deploy)
          command: python setup.py verify
      - run:
          name: Initialize .pypirc (Test Deploy)
          command: |
            echo -e "[distutils]" >> ~/.pypirc
            echo -e "index-servers = " >> ~/.pypirc
            echo -e "    pypi" >> ~/.pypirc
            echo -e "    testpypi" >> ~/.pypirc
            echo -e "" >> ~/.pypirc
            echo -e "[testpypi]" >> ~/.pypirc
            echo -e "repository: https://test.pypi.org/legacy/" >> ~/.pypirc
            echo -e "username: $TEST_PYPI_USERNAME" >> ~/.pypirc
            echo -e "password: $TEST_PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Build Python Wheel (Test Deploy)
          command: |
            python3 setup.py sdist
            python3 setup.py bdist_wheel
      - run:
          name: upload to TestPyPI
          command: python3 -m twine upload --repository testpypi dist/* --verbose
      - run:
          name: pip install from TestPyPI
          command: |
            pip3 install --user --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple nucypher --verbose
            python3 -c "import nucypher; print(nucypher.__version__)"

  publish_pypi:
    <<: *python_36_base
    steps:
      - checkout
      - pip_install
      - run:
          name: Install Twine
          command: pip3 install --user twine
      - run:
          name: Verify git tag == __version__
          command: python3 setup.py verify
      - run:
          name: Initialize .pypirc
          command: |
            echo -e "[distutils]" >> ~/.pypirc
            echo -e "index-servers = " >> ~/.pypirc
            echo -e "    pypi" >> ~/.pypirc
            echo -e "" >> ~/.pypirc
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USERNAME" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Build Python Wheel
          command: |
            python3 setup.py sdist
            python3 setup.py bdist_wheel
      - deploy:
          name: Upload to PyPI
          command: python3 -m twine upload dist/* --verbose

  publish_docker:
    working_directory: ~/nucypher
    docker:
      - image: docker:18.06.1-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - ~/docker/nucypher.tar
      - run:
          name: Load Docker Image Layer Cache
          command: |
            set +o pipefail
            docker load -i ~/docker/nucypher.tar | true
      - deploy:
          name: Push NuCypher Docker Image
          command: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            docker push nucypher/nucypher:$CIRCLE_TAG
